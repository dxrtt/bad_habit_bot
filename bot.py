import asyncio
import aioschedule
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, ChatActions

import keyboards
from sqlihter import SQLighter

API_TOKEN = ''

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()

# init
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
db = SQLighter('habitdb.db')


# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class HabitAdd(StatesGroup):
    name = State()


class HabitWatch(StatesGroup):
    HabitList = State()
    HabitEdit = State()
    HabitBreak = State()


class Testform(StatesGroup):
    name = State()


# Handlers

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –±–æ—Ä—å–±—ã —Å –≤—Ä–µ–¥–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?\n/help - –ø–æ–º–æ—â—å",
                        reply_markup=keyboards.inline_hello_kb)
    db.achievements_add_user(message.from_user.id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ - –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
@dp.callback_query_handler(lambda c: c.data == 'add')
async def process_callback_button1(callback_query: types.CallbackQuery, state: FSMContext):
    # await bot.answer_callback_query(callback_query.id)
    await bot.answer_callback_query(callback_query.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏', show_alert=True)
    # await bot.send_message(callback_query.from_user.id, '–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É')
    await HabitAdd.name.set()
    await bot.send_message(callback_query.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
@dp.message_handler(state=HabitAdd.name)
async def habitname(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    if len(message.text) > 30:
        await bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –ë–î
        db.add_habit(message.from_user.id, message.text, datetime.today().strftime("%d/%m/%Y %H:%M:%S"))
        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        await bot.send_message(message.from_user.id, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=keyboards.inline_hello_kb)
        await state.finish()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤—ã—á–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'watch')
async def process_callback_button1(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb_array = db.watch_habit(str(callback_query.from_user.id))
    testwatch_kb = InlineKeyboardMarkup()
    for i in range(len(kb_array)):
        testwatch_kb.add(InlineKeyboardButton(kb_array[i][0], callback_data=kb_array[i][0]))
    testwatch_kb.add(keyboards.inline_button_menu)

    await bot.send_message(callback_query.from_user.id, text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫:', reply_markup=testwatch_kb)
    await HabitWatch.HabitList.set()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == 'achievements')
async def habit_achievments(callback_query: types.CallbackQuery):
    achievements = db.achievements_user(callback_query.from_user.id)
    message = "–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"

    if achievements[0][0]:
        message += "–ü—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è 1 –¥–µ–Ω—å –±–µ–∑ –ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: üü¢\n"
    else:
        message += "–ü—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è 1 –¥–µ–Ω—å –±–µ–∑ –ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: üî¥\n"

    if achievements[0][1]:
        message += "–ü—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è 7 –¥–Ω–µ–π –±–µ–∑ –ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: üü¢\n"
    else:
        message += "–ü—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è 7 –¥–Ω–µ–π –±–µ–∑ –ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: üî¥\n"

    message += "\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"

    await bot.send_message(callback_query.from_user.id, message, reply_markup=keyboards.inline_hello_kb)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'menu')
async def goto_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=keyboards.inline_hello_kb)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'menu', state=HabitWatch.HabitEdit)
async def goto_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=keyboards.inline_hello_kb)
    await state.finish()


# –ü–æ–º–æ—â—å
@dp.message_handler(commands=['help'])
async def cmd_start(message: types.Message, state: FSMContext):
    # await Testform.name.set()
    await bot.send_message(message.from_user.id, "https://telegra.ph/Instrukciya-po-ispolzovaniyu-bota-01-10")
    # await message.reply('Pishi your name')


# –ú–µ–Ω—é –ø—Ä–∏–≤—ã—á–∫–∏ - –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π
@dp.callback_query_handler(lambda c: c.data, state=HabitWatch.HabitList)
async def habit_watch(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'menu':
        await bot.send_message(callback_query.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é',
                               reply_markup=keyboards.inline_hello_kb)
        await state.finish()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–µ –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    habit_info = db.habit_info(callback_query.from_user.id, callback_query.data)
    habit_status = db.habit_notifications_getstatus(habit_info[0][2])
    date_time_obj = datetime.strptime(habit_info[0][3], '%d/%m/%Y %H:%M:%S')
    deltatime = datetime.today() - date_time_obj
    notif_deltatime = datetime.today() - datetime.strptime(habit_info[0][1], '%d/%m/%Y %H:%M:%S')

    habit_message = 'üìå ' + text(bold('–ü—Ä–∏–≤—ã—á–∫–∞: ')) + habit_info[0][0] + '\n' + text(bold('üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ')) + str(
        habit_info[0][1]) + \
                    '\n\n' + text(bold('‚è≥ –í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ: ')) + '\n–î–Ω–µ–π: ' + str(deltatime.days) + '\n–ß–∞—Å–æ–≤: ' + \
                    str(int(deltatime.seconds / 3600)) + '\n–ú–∏–Ω—É—Ç: ' + str(int((deltatime.seconds / 60) % 60)) + \
                    '\n–°–µ–∫—É–Ω–¥: ' + str(int((deltatime.seconds) % 60)) + '\n\n' + text(bold('üìâ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ä—ã–≤—ã: ')) \
                    + '\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä—ã–≤–∞: ' + str(habit_info[0][3]) + '\n–í—Å–µ–≥–æ —Å—Ä—ã–≤–æ–≤: ' + str(habit_info[0][5]) \
                    + '\n–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä—ã–≤–∞: ' + str(habit_info[0][4])

    if habit_status[0][0]:
        habit_message += '\n\nüõé –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'
    else:
        habit_message += '\n\nüõé –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'

    habit_message += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'

    await bot.send_message(callback_query.from_user.id, habit_message, reply_markup=keyboards.inline_habit_kb,
                           parse_mode=ParseMode.MARKDOWN_V2)

    # –ú–æ—Ç–∏–≤–∞—Ü–∏—è
    if (notif_deltatime.days > 1) & (habit_info[0][5] == 0):
        msg = text(" üéâ ", code("–¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è —É–∂–µ –±–æ–ª—å—à–µ –¥–Ω—è, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"), " üéâ ")
        await bot.send_message(callback_query.from_user.id, msg, parse_mode=ParseMode.MARKDOWN_V2)
    elif habit_info[0][5] > 0:
        msg = text(code('‚Äï –ü–æ–±–æ—Ä–æ—Ç—å –¥—É—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ª–µ–≥—á–µ —Å–µ–≥–æ–¥–Ω—è, —á–µ–º –∑–∞–≤—Ç—Ä–∞. ~ –ö–æ–Ω—Ñ—É—Ü–∏–π'))
        await bot.send_message(callback_query.from_user.id, msg, parse_mode=ParseMode.MARKDOWN_V2)

    await state.update_data(habit_id=(habit_info[0][2]))
    await HabitWatch.HabitEdit.set()


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'del', state=HabitWatch.HabitEdit)
async def habit_del(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    db.delete_habit(user_data['habit_id'])
    await bot.send_message(callback_query.from_user.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=keyboards.inline_hello_kb)
    await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä—ã–≤–∞ –ø—Ä–∏–≤—ã—á–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'break', state=HabitWatch.HabitEdit)
async def habit_break(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å—Ä—ã–≤–∞')
    await HabitWatch.HabitBreak.set()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä—ã–≤–∞ –ø—Ä–∏–≤—ã—á–∫–∏ - –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã
@dp.message_handler(state=HabitWatch.HabitBreak)
async def habit_break_reason(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    db.update_habit_date(user_data['habit_id'], datetime.today().strftime("%d/%m/%Y %H:%M:%S"), message.text)
    await bot.send_message(message.from_user.id, '–°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω',
                           reply_markup=keyboards.inline_hello_kb)
    await state.finish()


# –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == 'notifications', state=HabitWatch.HabitEdit)
async def habit_notifications(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    status = db.habit_notifications_getstatus(user_data['habit_id'])
    if status[0][0]:
        db.habit_notifications_setstatus(user_data['habit_id'], False)
        await bot.send_message(callback_query.from_user.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
        await bot.send_message(callback_query.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.inline_hello_kb)
    else:
        db.habit_notifications_setstatus(user_data['habit_id'], True)
        await bot.send_message(callback_query.from_user.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
        await bot.send_message(callback_query.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.inline_hello_kb)

    await state.finish()


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def on_startup(x):
    asyncio.create_task(scheduled(600))


# –°–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)

        habitslist = db.habit_notifications()
        for h in habitslist:
            if h[6]:
                date_time_obj = datetime.strptime(h[3], '%d/%m/%Y %H:%M:%S')
                deltatime = datetime.today() - date_time_obj

                if deltatime.days >= 1:
                    db.achievements_settrue(h[1], "one_day")

                if (deltatime.days >= 1) & (h[4] == False):
                    message = "–í—ã –±–æ—Ä–∏—Ç–µ—Å—å —Å –ø—Ä–∏–≤—ã—á–∫–æ–π '" + str(h[2]) + "' —É–∂–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üéâ"
                    await bot.send_message(h[1], message)
                    db.habit_notifications_settrue(h[0], "one_day_not")
                    print(h[2])

                if deltatime.days >= 7:
                    db.achievements_settrue(h[1], "seven_day")

                if (deltatime.days >= 7) & (h[5] == False):
                    message = "–í—ã –±–æ—Ä–∏—Ç–µ—Å—å —Å –ø—Ä–∏–≤—ã—á–∫–æ–π '" + str(h[2]) + "' —É–∂–µ –±–æ–ª—å—à–µ 7 –¥–Ω–µ–π!\n–í—ã –º–æ–ª–æ–¥–µ—Ü!üéâ"
                    await bot.send_message(h[1], message)
                    db.habit_notifications_settrue(h[0], "sevn_day_not")
                    print(h[2])


if __name__ == '__main__':
    # executor.start_polling(dp, skip_updates=True)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)  # –≤–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    # executor.start(dp, scheduled(10))
